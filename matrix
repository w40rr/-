variant 12
#include <iostream>

//3
//В квадратной матрице, найти сумму отрицательных элементов, лежащих на главной
//диагонали.
int main() {
    const int N = 3; 
    int A[N][N];
    int sum = 0; 
    
    srand(time(0));
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            A[i][j] = rand() % 21 - 10;
        }
    }

    std::cout << "Matrix A:\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            std::cout << A[i][j] << " ";
        }
        std::cout << std::endl;
    }

    for (int i = 0; i < N; i++) {
        if (A[i][i] < 0) {
            sum += A[i][i];
        }
    }

    std::cout << "summa otricatelnix elementov na glavnoi diagonale: " << sum << std::endl;

    return 0;
}

#include <iostream>

//5
//В квадратной матрице для каждой строки найти минимальный элемент и
//переставить его с элементом, стоящим в этой строке на главной диагонали.
int main() {
  const int n = 4;  
  int arr[n][n] = {{100, 100, 100, 1}, {100, 100, 100, 1}, {100, 1, 100, 100}, {100, 1, 100, 100}}; 
  
  std::cout << "matrix:" << std::endl;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      std::cout << arr[i][j] << " ";
    }
    std::cout << std::endl;
  }
  
  for (int i = 0; i < n; i++) {
    int min_index = i;  
    for (int j = 0; j < n; j++) {
      if (arr[i][j] < arr[i][min_index]) {
        min_index = j;
      }
    }
    if (min_index != i) {  
      std::swap(arr[i][min_index], arr[i][i]);
    }
  }
  
  std::cout << "new matrix:" << std::endl;
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      std::cout << arr[i][j] << " ";
    }
    std::cout << std::endl;
  }
  
  return 0;
}

#include <iostream>

//8
//Дана матрица. Элементы первой строки — мощность электромотора, второй строки
//— категория мотора (число от 1 до 3). Найти самый мощный мотор категории 3.
int main() {
    const int q = 2; 
    const int w = 4; 

    int matrix[q][w] = {{120, 180, 200, 150}, {1, 2, 3, 3}};

    int max_power = 0;
    int max_power_index = -1;

    for (int i = 0; i < w; i++) {
        if (matrix[1][i] == 3 && matrix[0][i] > max_power) {
            max_power = matrix[0][i];
            max_power_index = i;
        }
    }

    if (max_power_index == -1) {
        std::cout << "nety motora 3 kategorii" << std::endl;
    } else {
        std::cout << "samiy moshniy motor 3 kategorii: " << max_power << "Bt" << std::endl;
    }

    return 0;
}

#include <iostream>

//9b
/*Объявить, реализовать заполнение данными с клавиатуры ИЛИ из файла и вывести
на экран матрицу, описывающую следующие сущности. Предложите свой вариант.
b. Состояние робота на шахматной доске. Робот характеризуется уровнем
заряда, скоростью движения*/
int main() {
    const int q = 8;
    const int w = 8;
    int matrix[q][w];

    std::cout << "zapolnite matricy 8x8, opicivaushuy sostoyanie robota na chess doske: " << std::endl;

    for (int i = 0; i < q; i++) {
        for (int j = 0; j < w; j++) {
            std::cout << "vvedite znachenie dlya yacheiki [" << i << "][" << j << "]: ";
            std::cin >> matrix[i][j];
        }
    }

    // Вывод матрицы на экран
    std::cout << "matrix, opicivaushaya sostoyanie robota na chess doske " << std::endl;
    for (int i = 0; i < q; i++) {
        for (int j = 0; j < w; j++) {
            std::cout << matrix[i][j] << " ";
        }
        std::cout << std::endl;
    }

    return 0;
}

#include <iostream>
#include <cmath>

//10.6
/*Дана матрица. Составить массив, каждый элемент которого равен максимальному
элементу соответствующей строки матрица.Реализовать вычисление матричных норм*/
using namespace std;

const int q = 3;
const int w = 3;

void maxInRow(int arr[][w], int result[]) {
    for (int i = 0; i < q; i++) {
        int max = arr[i][0];
        for (int j = 1; j < w; j++) {
            if (arr[i][j] > max) {
                max = arr[i][j];
            }
        }
        result[i] = max;
    }
}

int maxNorm(int arr[][w]) {
    int result[q];
    maxInRow(arr, result);
    int max = result[0];
    for (int i = 1; i < q; i++) {
        if (result[i] > max) {
            max = result[i];
        }
    }
    return max;
}

int frobeniusNorm(int arr[][w]) {
    int sum = 0;
    for (int i = 0; i < q; i++) {
        for (int j = 0; j < w; j++) {
            sum += arr[i][j] * arr[i][j];
        }
    }
    return sqrt(sum);
}

int main() {
    int matrix[q][w] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};
    int result[q];
    maxInRow(matrix, result);
    cout << "Max in each row: ";
    for (int i = 0; i < q; i++) {
        cout << result[i] << " ";
    }
    cout << endl;
    cout << "Max norm: " << maxNorm(matrix) << endl;
    cout << "Frobenius norm: " << frobeniusNorm(matrix) << endl;
    return 0;
}
